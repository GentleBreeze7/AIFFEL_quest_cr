# 0. 서비스 개요

어플리케이션 이름 : 음성녹음
기능 : 음성 녹음 후 Ai를 이용한 텍스트 추출 (ex : 노래 가사 추출, 녹음 했던 내용 핵심 요약 등)


# 1. 정보 구조 분석
홈 (Home)
 ├▶ 기본 녹음 (Standard Recording)
 ├▶ 음성 메모 (Voice Memo)
 ├▶ 인터뷰 녹음 (Interview Mode)
 ├▶ 녹음 파일 목록 (Recording List)
     ├▶ 파일 상세 정보 (File Details)
     ├▶ 파일 편집 (Trim, Rename)
     ├▶ 공유하기 (Share)
 ├▶ 설정 (Settings)
     ├▶ 오디오 품질 설정 (Audio Quality)
     ├▶ 저장 위치 변경 (Storage Location)
     ├▶ 앱 정보 (About)


# 2. 와이어프레임
📱 메인 화면 (홈)
상단: 앱 제목 + 설정 아이콘
중앙: 녹음 버튼 (클릭 시 녹음 시작)
하단: 녹음 파일 목록
🎙️ 녹음 화면
녹음 진행 시간 표시
일시 정지 / 중지 버튼
녹음 완료 후 저장 옵션
📂 녹음 파일 목록
파일명 + 날짜
파일 클릭 시 상세 화면 이동
✂️ 파일 상세 / 편집 화면
재생 / 일시 정지
파일 이름 변경
트리밍(잘라내기) 기능
공유하기 버튼


# 3. 프로토타이핑


# 4. 플러터 구현

### 코드:
import 'dart:io';
import 'package:flutter/material.dart';
import 'package:flutter_sound/flutter_sound.dart';
import 'package:path_provider/path_provider.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:audioplayers/audioplayers.dart';

void main() {
  runApp(VoiceRecorderApp());
}

class VoiceRecorderApp extends StatefulWidget {
  @override
  _VoiceRecorderAppState createState() => _VoiceRecorderAppState();
}

class _VoiceRecorderAppState extends State<VoiceRecorderApp> {
  FlutterSoundRecorder? _recorder;
  FlutterSoundPlayer? _player;
  bool _isRecording = false;
  bool _isPlaying = false;
  String? _filePath;
  List<File> _recordings = [];

  @override
  void initState() {
    super.initState();
    _initRecorder();
  }

  Future<void> _initRecorder() async {
    _recorder = FlutterSoundRecorder();
    _player = FlutterSoundPlayer();

    await _recorder!.openRecorder();
    await _player!.openPlayer();

    // 권한 요청
    await Permission.microphone.request();
    await Permission.storage.request();

    // 저장된 파일 불러오기
    _loadRecordings();
  }

  Future<void> _startRecording() async {
    Directory dir = await getApplicationDocumentsDirectory();
    _filePath = '${dir.path}/recording_${DateTime.now().millisecondsSinceEpoch}.aac';

    await _recorder!.startRecorder(toFile: _filePath);
    setState(() => _isRecording = true);
  }

  Future<void> _stopRecording() async {
    await _recorder!.stopRecorder();
    setState(() => _isRecording = false);

    if (_filePath != null) {
      _recordings.add(File(_filePath!));
    }
  }

  Future<void> _playRecording(String path) async {
    if (_isPlaying) {
      await _player!.stopPlayer();
      setState(() => _isPlaying = false);
    } else {
      await _player!.startPlayer(fromURI: path);
      setState(() => _isPlaying = true);
    }
  }

  Future<void> _loadRecordings() async {
    Directory dir = await getApplicationDocumentsDirectory();
    List<FileSystemEntity> files = dir.listSync();
    
    setState(() {
      _recordings = files.whereType<File>().toList();
    });
  }

  @override
  void dispose() {
    _recorder!.closeRecorder();
    _player!.closePlayer();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('음성 녹음기')),
        body: Column(
          children: [
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _isRecording ? _stopRecording : _startRecording,
              child: Text(_isRecording ? '녹음 중지' : '녹음 시작'),
            ),
            Expanded(
              child: ListView.builder(
                itemCount: _recordings.length,
                itemBuilder: (context, index) {
                  String path = _recordings[index].path;
                  return ListTile(
                    title: Text(path.split('/').last),
                    trailing: IconButton(
                      icon: Icon(Icons.play_arrow),
                      onPressed: () => _playRecording(path),
                    ),
                  );
                },
              ),
            ),
          ],
        ),
      ),
    );
  }
}


# 5. 회고
이번에 몸이 안좋아서 프로젝트 할 시간과 이전 공부를 가능한 시간도 너무 부족해서 거의 진행을 하지 못했는데 그나마 어떻게 진행되는지 이해하고
기초적인 문서 작성이라도 할 수 있게 되어 다행이었습니다. 이후에 더 추가해서 완성시켜볼 계획입니다.
